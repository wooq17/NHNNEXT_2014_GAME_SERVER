작업용 메모장

연결이 성립하면 세션은 자신의 플레이어를 생성하고
플레이어의 start()에서 초기화를 진행한 뒤 OnTick() 호출

OnTick()은 랜덤하게 이벤트를 발생시키고, 이를 GCEDispatch()로 등록한다
그리고 AllPlayerBuffDecay::CheckBuffTimeout()를 통해서 모든 플레이어가 버프 남은 시간을 확인 하도록 등록

그리고 mHeartBeat 후에 OnTick()이 실행되도록 
LTimer->PushTimerJob()에 집어 넣는다 
// 실행된 스레드에 다시 요청 = 특정 세션은 특정 스레드에 귀속?
// OnTick()은 귀속되고, IO 작업은 스레드에 독립적으로 실행

그러니까 주기적으로 버프 걸고, 버프 시간 확인해서 없애는 작업은 
Player가 호출하는 것이고, 이 플레이어가 이 작업을 수행하는 것은
각각의 스레드들이 LTimer을 이용해서 플레이어의 작업을 주기적으로 실헹하기 때문  


기본적인 작업의 실행은 SyncExecutable가 주체가 되고 
실행 함수를 TimerTask가 가지고 있게 된다 
mExecutionTick을 가지고 비교 하는데, 순서 정렬을 위해서 사용
// TimerJobElement을 자료 구조에 넣을 때 이 크기 기준으로 정렬하나?
// TimerJobPriorityQueue에 넣으니까 맞나 보다 
// 넣을 때 실행되는 시점을 계산해서 넣으니까 큐 앞에서 부터 지금 시간이랑 비교해서 
// 더 빠른 애들은 꺼내서 실행하고 아닌 애가 있으면 걔 뒤에는 다 나중에 실행이니까 종료 


ThreadLocal 클래스는 각 스레드가 각각 가지고 있어야 하는 변수들을 정의 


SyncExecutable
실제 작업을 실행하는 애들